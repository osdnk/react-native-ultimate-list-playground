import java.util.regex.Matcher
import java.util.regex.Pattern

// OSS_ANDROID_TEMPLATE_FILE_HEADER
/**
 * New android-publish gradle script
 *
 * 1. Multiple flavors support.
 * 2. Provide RELEASE_REPOSITORY_URL and SNAPSHOT_REPOSITORY_URL with gradle.properties or local.properties.
 * 3. Provide REPOSITORY_USERNAME and REPOSITORY_PASSWORD if needed.
 */
apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : readPropertyFromLocalProperties('RELEASE_REPOSITORY_URL')
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : readPropertyFromLocalProperties('SNAPSHOT_REPOSITORY_URL')
}

def readPropertyFromLocalProperties(String key) {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (Exception e) {
        println("load local properties failed msg:${e.message}")
    }
    return properties.getProperty(key)
}

def getRepositoryUsername() {
    return hasProperty('REPOSITORY_USERNAME') ? REPOSITORY_USERNAME : readPropertyFromLocalProperties('REPOSITORY_USERNAME')
}

def getRepositoryPassword() {
    return hasProperty('REPOSITORY_PASSWORD') ? REPOSITORY_PASSWORD : readPropertyFromLocalProperties('REPOSITORY_PASSWORD')
}

def curArtifactId

android.libraryVariants.all { variant ->
    // Skipped debug variants
    if (variant.buildType.name == "debug") {
        return
    }
    // Skipped non publishing variants
    if (!android.defaultPublishConfig.startsWith(variant.flavorName)) {
        return
    }

    def hasFlavors = !variant.flavorName.isEmpty()

    def artifactIdSuffix = hasFlavors ? variant.flavorName.replace('_', '-').capitalize() : ''
    variant.productFlavors.each { flavor ->
        def flavorArtifactIdSuffix = flavor.ext.has('artifactIdSuffix') ? flavor.ext.artifactIdSuffix : flavor.name
        if (!flavorArtifactIdSuffix.isEmpty()) {
            artifactIdSuffix = artifactIdSuffix.replace(flavor.name.capitalize(), "-${flavorArtifactIdSuffix}")
        } else {
            artifactIdSuffix = artifactIdSuffix.replace(flavor.name.capitalize(), "")
        }
    }
    if (!artifactIdSuffix.isEmpty() && !artifactIdSuffix.startsWith('-')) {
        artifactIdSuffix = '-' + artifactIdSuffix
    }

    curArtifactId = "${POM_ARTIFACT_ID}${artifactIdSuffix}"

    def jniJar = task("${variant.name}JniJar", type: Jar, dependsOn: 'build') {
    }
    def javadoc = task("${variant.name}Javadoc", type: Javadoc) {
        source = variant.javaCompile.source // TODO: deprecated
        options.encoding = 'utf-8'
        destinationDir = file("${buildDir}/docs/javadoc${hasFlavors ? artifactIdSuffix : ""}")
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath += files(ext.androidJar)
        classpath += files(configurations.compile)
        classpath += files(configurations.javadocDeps)
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        failOnError false
    }
    def javadocJar = task("${variant.name}JavadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    def jniSymbolsJar = task("${variant.name}SymbolJar", type: Jar, dependsOn: 'build') {
        classifier = "so-symbols"
        boolean hasNativeBuildTask = false
        tasks.each { task ->
            if (task.getName().startsWith("externalNativeBuild")) {
                hasNativeBuildTask = true
            }
        }

        if (!hasNativeBuildTask) {
            return
        }

        if (hasFlavors) {
            variant.productFlavors.each { flavor ->
                from file("build/intermediates/cmake/${flavor.name}Release/obj/")
            }
        } else {
            from file("build/intermediates/cmake/release/obj/")
        }
    }

    def publicationName = "component${variant.name.capitalize()}"

    // Declare publications
    publishing.publications {
        "$publicationName"(MavenPublication) {
            groupId groupId
            artifactId curArtifactId
            version version

            from components.findByName("android${variant.name.capitalize()}")

            if (hasFlavors) {
                variant.productFlavors.each { flavor ->
                    artifact("build/outputs/aar/${project.getName()}-${flavor.name}-release.aar")
                }
            } else {
                artifact("build/outputs/aar/${project.getName()}-release.aar")
            }
            artifact javadocJar
            artifact jniSymbolsJar

            pom {
                name = 'MMKV'
                description = POM_DESCRIPTION
                url = POM_URL
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                // write the dependency of the library into pom
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.all { configuration ->
                        def name = configuration.name
                        if (name != "implementation" && name != "compile" && name != "api") {
                            return
                        }
                        configuration.dependencies.each {
                            if (it.name == "unspecified") {
                                return
                            }
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (name == "api" || name == "compile") {
                                dependencyNode.appendNode("scope", "compile")
                            } else {
                                dependencyNode.appendNode("scope", "runtime")
                            }
                        }
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}

publishing.repositories {
    maven {
        url "${isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()}"
        credentials {
            username "${getRepositoryUsername()}"
            password "${getRepositoryPassword()}"
        }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task buildAndPublishToLocalMaven(type: Copy, dependsOn: ['build', 'publishToMavenLocal']) {
    group = 'publishing'

    // save artifacts files to artifacts folder
    from configurations.archives.allArtifacts.files
    into "${rootProject.buildDir}/outputs/artifacts/"
    rename { String fileName ->
        fileName.replace("release.aar", "${version}.aar")
    }

    doLast {
        println "* published to maven local: ${project.group}:${project.name}:${project.version}"
    }
}

task buildAndPublishRepo(type: Copy, dependsOn: ['build', 'publish']) {
    group = "publishing"

    // save artifacts files to artifacts folder
    from configurations.archives.allArtifacts.files
    into "${rootProject.buildDir}/outputs/artifacts/"
    rename { String fileName ->
        fileName.replace("release.aar", "${version}.aar")
    }

    doLast {
        println "* published to repo: ${project.group}:${project.name}:${project.version}"
    }
}

apply from: rootProject.file('gradle/check.gradle')